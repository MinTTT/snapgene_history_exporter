# -*- coding: utf-8 -*-

"""

 @author: Pan M. CHU
 @Email: pan_chu@outlook.com
"""

# Built-in/Generic Imports
import datetime
import os
import sys
import getopt
# Libs
import pandas as pd
import datetime
import snapgene_reader.snapgene_reader as dnarder
from snapgene_reader.snapgene_reader import remove_suffix


def tag_generator(idf_list: list):
    """
    Generate a unique tag for each fragment
    the tag is generated by the date and a number
    """
    today_mmdd = datetime.datetime.today().strftime('%m%d')
    idf_set = set()
    unq_dict = dict()
    tag_init = 1
    for idf in idf_list:
        if idf not in idf_set:
            unq_dict[idf] = '-'.join([today_mmdd, str(tag_init)])
            tag_init += 1
            idf_set.add(idf)
        yield unq_dict[idf]


# %%
if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hi:o:", ['help'])
    except:
        print("Error")

    dir_ps = None
    dir_out = None
    for opt, arg in opts:
        if opt in ['-i']:
            dir_ps = arg
        elif opt in ['-o']:
            dir_out = arg
        elif opt in ['--help', '-h']:
            print("Usage:"
                  "-i directory of *.dna files")
            exit(0)
    if dir_out is None:
        dir_out = dir_ps

    files_name = [file.name for file in os.scandir(dir_ps) if file.name.split('.')[-1] == 'dna']

    all_history = dict()
    # Get all histories of the
    for file in files_name:
        dna_file_path = os.path.join(dir_ps, file)
        print(f"[Snapgene Reader] -> Loading file: \t{file}\t")
        print(f"[Snapgene Reader] -> file path: \t{dna_file_path}\t")
        dna_dict = dnarder.snapgene_file_to_dict(dna_file_path)
        all_history[file] = dna_dict['history']


    today_mmdd = datetime.datetime.today().strftime('%m%d')

    all_idf = []
    all_frags = []
    templates_list = []
    all_primers_dict = {}
    for pd_name, pd_dict in all_history.items():
        fragment_num = pd_dict['fragments_number']
        for i in range(fragment_num):
            frag = pd_dict[f'fragment_{i}']  # type: dict
            if 'operation' in frag.keys():
                if frag['operation'] == 'amplifyFragment':
                    primers = frag['primers_0']['name'] + frag['primers_1']['name']

                    # check if the primers are already in the primers_dict
                    if frag['primers_0']['name'] not in all_primers_dict.keys():
                        all_primers_dict[frag['primers_0']['name']] = {'sequence': frag['primers_0']['sequence'],
                                                                       'assembleFor': [remove_suffix(pd_name)]}
                    else:
                        # check the sequences are the same
                        if all_primers_dict[frag['primers_0']['name']]['sequence'].upper() != frag['primers_0']['sequence'].upper():
                            print(f"Primer {frag['primers_0']['name']} has different sequence in different plasmids!")
                        else:
                            all_primers_dict[frag['primers_0']['name']]['assembleFor'].append(remove_suffix(pd_name))
                    
                    if frag['primers_1']['name'] not in all_primers_dict.keys():
                        all_primers_dict[frag['primers_1']['name']] = {'sequence': frag['primers_1']['sequence'],
                                                                       'assembleFor': [remove_suffix(pd_name)]}
                    else:
                        # check the sequences are the same
                        if all_primers_dict[frag['primers_1']['name']]['sequence'].upper() != frag['primers_1']['sequence'].upper():
                            print(f"Primer {frag['primers_1']['name']} has different sequence in different plasmids!")
                        else:
                            all_primers_dict[frag['primers_1']['name']]['assembleFor'].append(remove_suffix(pd_name))
                    
                    # print(f"{frag['primers_0']['name']}\t {frag['primers_0']['sequence']}\t {remove_suffix(pd_name)}")
                    # print(f"{frag['primers_1']['name']}\t {frag['primers_1']['sequence']}\t {remove_suffix(pd_name)}")

                    primersList = [frag['primers_0']['name'], frag['primers_1']['name']]
                    primersList.sort()
                    frag_primers_name = "; ".join(primersList)

                else:
                    primers = ''
                    frag_primers_name = '-'
                template = frag['template']

            else:
                primers = ''
                template = ''
                frag_primers_name = "-"
            templates_list.append(template)
            idf = frag['length'] + primers + template
            frag['identify_string'] = idf
            frag['frag_primers_name'] = frag_primers_name
            frag['assembleFor'] = remove_suffix(pd_name)
            all_idf.append(idf)
            all_frags.append(frag)
    # sort fragments order by template name
    sorted_index = [i[0] for i in sorted(enumerate(templates_list), key=lambda x:x[1])]
    all_idf = [all_idf[i] for i in sorted_index]
    all_frags = [all_frags[i] for i in sorted_index]

    taggenerator = tag_generator(all_idf)

    uniq_tag = set()
    uniq_frag = []
    uniq_frag_dict = {}
    for index, tag in enumerate(taggenerator):
        all_frags[index]['unique_tag'] = tag

        if tag not in uniq_frag_dict.keys():
            uniq_frag_dict[tag] = all_frags[index]
        else:
            if all_frags[index]['length'] != uniq_frag_dict[tag]['length']:
                print(f"Fragment {tag} has different length in different plasmids!")
            if all_frags[index]['frag_primers_name'] != uniq_frag_dict[tag]['frag_primers_name']:
                print(f"Fragment {tag} has different primers in different plasmids!")
            if all_frags[index]['template'] != uniq_frag_dict[tag]['template']:
                print(f"Fragment {tag} has different template in different plasmids!")
            uniq_frag_dict[tag]['assembleFor'] += '; ' + all_frags[index]['assembleFor']

    for tag, frag in uniq_frag_dict.items():
        uniq_frag.append({'#_tag': tag, 'Description': frag['assembleFor'], 'primers': frag['frag_primers_name'],
                          "template": frag['template'], 'product size': frag['length'] })

    all_assemble = []
    for asb_name, asb_dict in all_history.items():
        assemble_frag_list = [asb_dict[f'fragment_{i}']['unique_tag'] for i in range(asb_dict['fragments_number'])]
        assemble_frag_list.sort(key= lambda name: int(name.split('-')[-1]))
        assemble_frag = '; '.join(assemble_frag_list)
        method = asb_dict['operation']
        all_assemble.append({"Plasmid #": remove_suffix(asb_name), "Assembly Fragments": assemble_frag,
                             "Colony PCR": None, 'Method': method, 'Sanger Sequencing': None})

    fragments_df = pd.DataFrame(columns=['#_tag', 'Description', 'primers', 'template', 'product size'])
    for frag in uniq_frag:
        fragments_df = fragments_df.append(frag, ignore_index=True)
    assemble_df = pd.DataFrame(columns=['Plasmid #', 'Assembly Fragments', 'Colony PCR', 'Method', 'Sanger Sequencing'])
    for assemble in all_assemble:
        assemble_df = assemble_df.append(assemble, ignore_index=True)

    for primer_name, primer_dict in all_primers_dict.items():
        primer_dict['assembleFor'] = '; '.join(primer_dict['assembleFor'])
        # print(f"{primer_name}\t{primer_dict['sequence']}\t{primer_dict['assembleFor']}")
    primers_df = pd.DataFrame.from_dict(all_primers_dict, orient='index')

    # export all files
    excel_file_path = f'{os.path.join(dir_out, f"{os.path.basename(dir_ps)}_all_assemblies_summary.xlsx")}'
    with pd.ExcelWriter(excel_file_path) as writer:
        fragments_df.to_excel(writer, sheet_name='Fragments')
        assemble_df.to_excel(writer, sheet_name='Assemblies')
        primers_df.to_excel(writer, sheet_name='Primers')

